{"version":3,"file":"js/contact-form.js","mappings":"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","sources":["webpack:///./src/js/contact-form.js"],"sourcesContent":["/**\r\n * Bigup Contact Form - Client Controller.\r\n *\r\n * Control client form submission performed with fetch and the\r\n * WP REST api. All data transmitted in JSON for extensibility.\r\n * \r\n * @package bigup-contact-form\r\n * @author Jefferson Real <me@jeffersonreal.uk>\r\n * @copyright Copyright (c) 2023, Jefferson Real\r\n * @license GPL2+\r\n * @link https://jeffersonreal.uk\r\n */\r\n\r\n const contactForm = () => {\r\n\t'use strict'\r\n\r\n\r\n    /**\r\n     * For debugging, set 'debug = true'. Output will be\r\n     * sent to the console.\r\n     */\r\n    let debug = false\r\n\r\n\r\n    /**\r\n     * Holds the start time of the request for debugging.\r\n     */\r\n    let start\r\n\r\n\r\n    /**\r\n     * Log timestamps in debug mode.\r\n     * @returns milliseconds since function call.\r\n     */\r\n     function stopwatch() {\r\n        let elapsed = Date.now() - start\r\n        return elapsed.toString().padStart( 5, '0' )\r\n    }\r\n\r\n\r\n    /**\r\n     * Allowed MIME type array.\r\n     * \r\n     * Eventually this should be populated from form plugin settings.\r\n     */\r\n\tconst allowedMimeTypes = [\r\n\t\t'image/jpeg',\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// .jpeg\r\n\t\t'image/png',\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// .png\r\n\t\t'image/gif',\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// .gif\r\n\t\t'image/webp',\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// .webp\r\n\t\t'image/heic',\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// .heic\r\n\t\t'image/heif',\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// .heif\r\n\t\t'image/avif',\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// .avif\r\n\t\t'image/svg+xml',\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// .sgv\r\n\t\t'text/plain',\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// .txt\r\n\t\t'application/pdf',\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// .pdf\r\n\t\t'application/vnd.oasis.opendocument.text',\t\t\t\t\t\t\t\t\t// .odt\r\n\t\t'application/vnd.oasis.opendocument.spreadsheet',\t\t\t\t\t\t\t// .ods\r\n\t\t'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\t// .docx\r\n\t\t'application/msword',\t\t\t\t\t\t\t\t\t\t\t\t\t\t// .doc\r\n\t\t'application/vnd.ms-excel',\t\t\t\t\t\t\t\t\t\t\t\t\t// .xls\r\n\t\t'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', \t\t// .xlsx\r\n\t\t'application/zip',\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// .zip\r\n\t\t'application/vnd.rar'\t\t\t\t\t\t\t\t\t\t\t\t\t\t// .rar\r\n\t]\r\n\r\n\r\n    /**\r\n     * Grab WP localize vars.\r\n     * \r\n     * wp_localize_bigup_contact_form_vars.*\r\n     * .rest_url;\r\n     * .rest_nonce;\r\n     * .admin_email;\r\n     * \r\n     */\r\n    const wp = wp_localize_bigup_contact_form_vars\r\n\r\n\r\n    /**\r\n     * Prepare the form ready for input.\r\n     * \r\n     */\r\n    function formInit() {\r\n\r\n        // Hide the honeypot input field(s)\r\n        let honeypots = document.querySelectorAll( '.saveTheBees' )\r\n\t\thoneypots.forEach( honeypot => {\r\n\t\t\tif ( honeypot.style.display !== \"none\" ) {\r\n\t\t\t\thoneypot.style.display = \"none\"\r\n\t\t\t}\r\n\t\t} )\r\n\r\n        // Attach listeners to the form(s)\r\n        document.querySelectorAll( '.bigup__form' ).forEach( form => {\r\n\r\n\t\t\t// Submit.\r\n            form.addEventListener( 'submit', handleFormSubmit )\r\n\r\n\t\t\t// File upload.\r\n\t\t\tconst fileUpload = form.querySelector( '.bigup__customFileUpload_input' )\r\n\t\t\tif ( fileUpload ) {\r\n\t\t\t\tfileUpload.addEventListener( 'change', updateFileList )\r\n\t\t\t}\r\n        } )\r\n    }\r\n\r\n\r\n    /**\r\n     * True when the form is processing a submission.\r\n     */\r\n    let formBusy = false\r\n\r\n\r\n    /**\r\n     * Handle the submitted form.\r\n     * \r\n     * Calls all functions to perform the form submission, and handle\r\n     * user feedback displayed over the form as 'popout messages'.\r\n     * Popout transitions and fetch request are performed asynchronously.\r\n     * \r\n     * @param {SubmitEvent} event\r\n     * \r\n     */\r\n    async function handleFormSubmit( event ) {\r\n\r\n        event.preventDefault()\r\n        start = Date.now()\r\n        if( debug ) console.log( 'Time | Start/Finish | Function | Target' )\r\n        if( debug ) console.log( stopwatch() + ' |START| handleFormSubmit' )\r\n\r\n        const form = event.currentTarget\r\n        const output = form.querySelector( '.bigup__form_output' )\r\n        let classes = [ 'bigup__form-popout', 'bigup__alert' ]\r\n\r\n        // boot bots if honeypot is filled.\r\n        if ( form.querySelector( '[name=\"required_field\"]' ).value != '' ) {\r\n            document.documentElement.remove()\r\n            window.location.replace( \"https://en.wikipedia.org/wiki/Robot\" )\r\n        }\r\n\r\n\t\tconst formData    = new FormData()\r\n\t\tconst textInputs  = form.querySelectorAll( '.bigup__form_input' )\r\n\t\tconst fileInput   = form.querySelector( '.bigup__customFileUpload_input' )\r\n\r\n\t\ttextInputs.forEach( input => {\r\n\t\t\tformData.append( input.name, input.value )\r\n\t\t} )\r\n\r\n\t\tif ( fileInput ) {\r\n\t\t\tconst files = fileInput.files\r\n\r\n\t\t\t// Loop through each of the selected files.\r\n\t\t\tfor( let i = 0; i < files.length; i++ ){\r\n\t\t\t\tlet file = files[ i ]\r\n\t\t\t\t// Check the file type\r\n\t\t\t\tif ( allowedMimeTypes.includes( file.type ) ) {\r\n\r\n\t\t\t\t\t// Add the file to the form's data.\r\n\t\t\t\t\tformData.append( 'files[]', file, file.name )\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// Animate an error message for bad MIME type.\r\n\t\t\t\t\tconst fileExt = file.name.split( '.' ).pop()\r\n\t\t\t\t\tclasses = [ ...classes, 'bigup__alert-danger' ]\r\n\t\t\t\t\toutput.style.display = 'flex'\r\n\t\t\t\t\tawait transition( output, 'opacity', '0' )\r\n\t\t\t\t\tawait removeChildren( output )\r\n\t\t\t\t\tawait popoutsIntoDom( output, [ `The selected file type \".${fileExt}\" is not allowed` ], classes )\r\n\t\t\t\t\tawait transition( output, 'opacity', '1' )\r\n\t\t\t\t\tawait pause( 5000 )\r\n\t\t\t\t\tawait transition( output, 'opacity', '0' )\r\n\t\t\t\t\tawait removeChildren( output )\r\n\t\t\t\t\toutput.style.display = 'none'\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n        // Fetch params.\r\n        const url = wp.rest_url\r\n        const fetchOptions = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"X-WP-Nonce\"    : wp.rest_nonce,\r\n                \"Accept\"        : \"application/json\"\r\n            },\r\n            body: formData,\r\n        }\r\n\r\n        // Async form submission timeline\r\n        try {\r\n\r\n            formBusy = true\r\n            lockForm( form )\r\n            output.style.display = 'flex'\r\n\r\n            await popoutsIntoDom( output, [ \"Connecting...\" ], classes )\r\n\r\n            let [ result, ] = await Promise.all( [\r\n                fetchHttpRequest( url, fetchOptions ),\r\n                transition( output, 'opacity', '1' )\r\n            ] )\r\n            result.class = ( result.ok ) ? 'success' : 'danger'\r\n            classes = [ ...classes, 'bigup__alert-' + result.class ]\r\n\r\n\t\t\t// Animate the popout messages.\r\n            await transition( output, 'opacity', '0' )\r\n            await removeChildren( output )\r\n            await popoutsIntoDom( output, result.output, classes )\r\n            await transition( output, 'opacity', '1' )\r\n            await pause( 5000 )\r\n            await transition( output, 'opacity', '0' )\r\n            await removeChildren( output )\r\n\r\n\t\t\t// Clean up the form.\r\n            if ( result.ok ) {\r\n                let inputs = form.querySelectorAll( '.bigup__form_input' )\r\n                inputs.forEach( input => { input.value = '' } )\r\n\t\t\t\tconst fileList = form.querySelector( '.bigup__customFileUpload_fileList' )\r\n\t\t\t\tif ( fileList ) removeChildren( fileList )\r\n            }\r\n            output.style.display = 'none'\r\n            formBusy = false\r\n\r\n        } catch ( error ) {\r\n            console.error( error )\r\n        } finally {\r\n            if( debug ) console.log( stopwatch() + ' | END | handleFormSubmit' )\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Perform a Fetch request with timeout and json response.\r\n     * \r\n     * Timeouts:\r\n     *     6s for webserver to SMTP server.\r\n     *     8s for SMTP send response to webserver.\r\n     *     14s for front end as fallback in lieu of server response.\r\n     * \r\n     * controller - abort controller to abort fetch request.\r\n     * abort - abort wrapped in a timer.\r\n     * signal: controller.signal - attach timeout to fetch request.\r\n     * clearTimeout( timeoutId ) - cancel the timer on response.\r\n     * \r\n     * @param {string} url      The WP plugin REST endpoint url.\r\n     * @param {object} options  An object of fetch API options.\r\n     * @return {object}         An object of message strings and ok flag.\r\n     * \r\n     */\r\n    async function fetchHttpRequest( url, options ) {\r\n\r\n        try {\r\n            if( debug ) console.log( `${stopwatch()} |START| Fetch request` )\r\n            const controller = new AbortController()\r\n            const abort = setTimeout( () => controller.abort(), 14000 )\r\n        \r\n            const response = await fetch( url, { ...options, signal: controller.signal } )\r\n            clearTimeout( abort )\r\n            const result = await response.json()\r\n            result.ok = response.ok\r\n            if ( typeof result.output === 'string' ) result.output = [ result.output ]\r\n            if ( ! result.ok ) throw result\r\n            return result\r\n\r\n        } catch ( error ) {\r\n            \r\n            if ( ! error.output ) {\r\n                // error is not a server response, so display a generic error.\r\n                error.output = [ 'Failed to establish a connection to the server.' ]\r\n                error.ok = false\r\n\t\t\t\tconsole.error( error )\r\n            }\r\n            for ( const message in error.output ) {\r\n                console.error( makeHumanReadable( error.output[ message ] ) )\r\n            }\r\n            return error\r\n\r\n        } finally {\r\n            if( debug ) console.log( `${stopwatch()} | END | Fetch request` )\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Clean strings for human output.\r\n     * \r\n     * This function uses regex patterns to clean strings in 3 stages:\r\n     * \r\n     * 1) Remove all html tags not inside brackets ()\r\n     *      (?<!\\([^)]*?) - do not match if preceeded by a '('\r\n     *      <[^>]*?> - match all <>\r\n     * 2) Remove anything that is not:\r\n     *      (\\([^\\)]*?\\)) - content enclosed in ()\r\n     *      ' '   - spaces\r\n     *      \\p{L} - letters\r\n     *      \\p{N} - numbers\r\n     *      \\p{M} - marks (accents etc)\r\n     *      \\p{P} - punctuation\r\n     * 3) Trim and replace multiple spaces with a single space.\r\n     * \r\n     * @link https://www.regular-expressions.info/unicode.html#category\r\n     * @param {string} string The dirty string.\r\n     * @returns The cleaned string.\r\n     * \r\n     */\r\n    function makeHumanReadable( string ) {\r\n        const tags = /(?<!\\([^)]*?)<[^>]*?>/g\r\n        const humanReadable = /(\\([^\\)]*?\\))|[ \\p{L}\\p{N}\\p{M}\\p{P}]/ug\r\n        const badWhitespaces = /^\\s*|\\s(?=\\s)|\\s*$/g\r\n        let notags = string.replace( tags, '' )\r\n        let notagsHuman = notags.match( humanReadable ).join( '' )\r\n        let notagsHumanClean = notagsHuman.replace( badWhitespaces, '' )\r\n        return notagsHumanClean\r\n    }\r\n\r\n\r\n    /**\r\n     * Remove all child nodes from a dom node.\r\n     * \r\n     * @param {object} parent The dom node to remove all child nodes from.\r\n     * \r\n     */\r\n    function removeChildren( parent ) {\r\n\r\n        if( debug ) console.log( `${stopwatch()} |START| removeChildren | ${parent.classList}` )\r\n        return new Promise( ( resolve, reject ) => {\r\n            try {\r\n\t\t\t\twhile ( parent.firstChild ) {\r\n\t\t\t\t\tparent.removeChild( parent.firstChild )\r\n\t\t\t\t}\r\n                resolve( 'Child nodes removed successfully.' )\r\n            } catch ( error ) {\r\n                reject( error )\r\n            } finally {\r\n                if( debug ) console.log( `${stopwatch()} | END | removeChildren | ${parent.classList}` )\r\n            }\r\n        } )\r\n    }\r\n\r\n\r\n    /**\r\n     * Helper function to async pause.\r\n     * \r\n     * @param {integer} milliseconds Duration to pause.\r\n     * \r\n     */\r\n    function pause( milliseconds ) { \r\n        return new Promise( ( resolve ) => { \r\n            setTimeout( () => {\r\n                resolve( 'Pause completed successfully.' )\r\n            }, milliseconds )\r\n        } )\r\n    }\r\n\r\n\r\n    /**\r\n     * Lock the form while the form is processing.\r\n     * \r\n     * @param {object} form element\r\n     */\r\n    function lockForm( form ) {\r\n\r\n        if( debug ) console.log( `${stopwatch()} |START| lockForm | Locked` )\r\n\r\n\t\t// Add disabled styles.\r\n\t\tconst sections = form.querySelectorAll( '.bigup__form_section' )\r\n        sections.forEach( section => { section.classList.add( 'disabled' ) } )\r\n\r\n\t\t// Disable inputs with html flag.\r\n\t\tconst inputs = form.querySelectorAll( ':is( input, textarea )' )\r\n        inputs.forEach( input => { input.disabled = true } )\r\n\r\n\t\t// Change button label.\r\n\t\tconst buttonLabel = form.querySelector( '.bigup__form_submit > *:first-child' )\r\n        let idleText = buttonLabel.innerText\r\n        buttonLabel.innerText = '[Busy]'\r\n\r\n\t\t// Revert when we detect form is no longer busy.\r\n        let unlockForm = setInterval( () => {\r\n            if ( ! formBusy ) {\r\n                clearInterval( unlockForm )\r\n                sections.forEach( section => { section.classList.remove( 'disabled' ) } )\r\n\t\t\t\tinputs.forEach( input => { input.disabled = false } )\r\n                buttonLabel.innerText = idleText\r\n                if( debug ) console.log( `${stopwatch()} | END | lockForm | Unlocked` )\r\n            }\r\n        }, 250 )\r\n    }\r\n\r\n\r\n    /**\r\n     * Create an array of popout message elements and insert into dom.\r\n     * \r\n     * @param {object} parentElement The parent node to append to.\r\n     * @param {array}  messageArray An array of messages as strings.\r\n     * @param {array}  classes An array of classes.\r\n     * \r\n     */\r\n    function popoutsIntoDom( parentElement, messageArray, classes ) {\r\n\r\n        if( debug ) console.log( `${stopwatch()} |START| popoutsIntoDom | ${messageArray[ 0 ]}` )\r\n        return new Promise( ( resolve, reject ) => {\r\n            try {\r\n                if ( ! parentElement || parentElement.nodeType !== Node.ELEMENT_NODE ) {\r\n                    throw new TypeError( `parentElement must be an element node.` )\r\n                } else if ( ! isIterable( messageArray ) ) {\r\n                    throw new TypeError( `messageArray must be non-string iterable. ${typeof messageArray} found.` )\r\n                }\r\n                let popouts = []\r\n                messageArray.forEach( ( message ) => {\r\n                    let p = document.createElement( 'p' )\r\n                    p.innerText = makeHumanReadable( message )\r\n                    classes.forEach( ( className ) => {\r\n                        p.classList.add( className )\r\n                    } )\r\n                    parentElement.appendChild( p )\r\n                    popouts.push( p )\r\n                } )\r\n                resolve( popouts )\r\n            } catch ( error ) {\r\n                reject( error )\r\n            } finally {\r\n                if( debug ) console.log( `${stopwatch()} | END | popoutsIntoDom | ${messageArray[ 0 ]}` )\r\n            }\r\n        } )\r\n    }\r\n\r\n\r\n    /**\r\n     * Transition a single element node with a callback on completion.\r\n     *\r\n     * No animation is performed here, this function expects a transition\r\n     * duration to be set in CSS, otherwise the promise will not resolve as\r\n     * no 'transitionend' event will be fired.\r\n     * \r\n     * Built in event listener was failing due to browser not initialising the\r\n     * new dom node in time for the new event listener. This problem wouldn't\r\n     * exist if the nodes weren't being created/removed on the fly.\r\n     * \r\n     * @param {object} node Element bound using bind() by caller.\r\n     * @param {string} property The css property to transition.\r\n     * @param {string} value The css value to transition to.\r\n     * @return {Promise} A promise that resolves when the transition is complete.\r\n     * \r\n     */\r\n    function transitionToResolve( property, value ) {\r\n\r\n        return new Promise( ( resolve, reject ) => {\r\n            try {\r\n                if( debug ) console.log( `${stopwatch()} |START| transition | ${this.classList} : ${property} : ${value}` )\r\n                this.style[ property ] = value\r\n\r\n                // Custom event listener to resolve the promise.\r\n                let transitionComplete = setInterval( () => {\r\n                    let style = getComputedStyle( this )\r\n                    if ( style.opacity === value ) {\r\n                        clearInterval( transitionComplete )\r\n                        if( debug ) console.log( `${stopwatch()} | END | transition | ${this.classList} : ${property} : ${value}` )\r\n                        resolve( 'Transition complete.' )\r\n                    }\r\n                }, 10 )\r\n            } catch ( error ) {\r\n                reject( error )\r\n            }\r\n        } )\r\n    }\r\n\r\n\r\n    /**\r\n     * Transition node(s) in parallel with resolved promise on completion.\r\n     * Accepts a single node or an array of nodes to provide a common interface\r\n     * for all element transitions.\r\n     * \r\n     * Expects a transition duration to be set in CSS.\r\n     * \r\n     * @param {array}  elements An array of elements.\r\n     * @param {string} property The css property to transition.\r\n     * @param {string} value The css value to transition to.\r\n     * @return {Promise} A promise that resolves when all transitions are complete.\r\n     * \r\n     */\r\n    async function transition( elements, property, value ) {\r\n\r\n        if ( ! isIterable( elements ) ) elements = [ elements ]\r\n        if ( isIterable( elements )\r\n            && elements.every( ( element ) => { return element.nodeType === 1 } ) ) {\r\n            // we have an array of element nodes.\r\n            const promises = elements.map( ( node ) => transitionToResolve.bind( node )( property, value ) )\r\n            let result = await Promise.all( promises )\r\n            return result\r\n\r\n        } else {\r\n            throw new TypeError( 'elements must be a non-string iterable. ' + typeof elements + ' found.' )\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Check if passed variable is iterable.\r\n     * \r\n     */\r\n    function isIterable( object ) {\r\n        // checks for null and undefined\r\n        if ( object == null ) {\r\n          return false\r\n        }\r\n        return typeof object[ Symbol.iterator ] === 'function'\r\n    }\r\n\r\n\r\n    /**\r\n     * Fire formInit() on 'doc ready'.\r\n     * \r\n     */\r\n    let docReady = setInterval( () => {\r\n        if ( document.readyState === 'complete' ) {\r\n            clearInterval( docReady )\r\n            formInit()\r\n        }\r\n    }, 250 )\r\n\r\n\r\n\t/**\r\n\t * Update the file select custom input with details of selected files.\r\n\t */\r\n\tconst updateFileList = ( event ) => {\r\n\t\tconst input  = event.currentTarget\r\n\t\tconst output = input.parentElement.nextElementSibling\r\n\t\tconst list   = document.createElement( \"ul\" )\r\n\t\tremoveChildren( output )\r\n\t\toutput.appendChild( list )\r\n\t\tfor ( var i = 0; i < input.files.length; ++i ) {\r\n\t\t\tlist.innerHTML += '<li>' + input.files.item( i ).name + '</li>'\r\n\t\t}\r\n\t}\r\n}\r\n\r\ncontactForm()\r\n"],"names":["contactForm","start","debug","stopwatch","Date","now","toString","padStart","allowedMimeTypes","wp","wp_localize_bigup_contact_form_vars","formBusy","async","handleFormSubmit","event","preventDefault","console","log","form","currentTarget","output","querySelector","classes","value","document","documentElement","remove","window","location","replace","formData","FormData","textInputs","querySelectorAll","fileInput","forEach","input","append","name","files","i","length","file","includes","type","fileExt","split","pop","style","display","transition","removeChildren","popoutsIntoDom","pause","url","rest_url","fetchOptions","method","headers","rest_nonce","body","sections","section","classList","add","inputs","disabled","buttonLabel","idleText","innerText","unlockForm","setInterval","clearInterval","lockForm","result","Promise","all","fetchHttpRequest","class","ok","fileList","error","options","controller","AbortController","abort","setTimeout","response","fetch","signal","clearTimeout","json","message","makeHumanReadable","string","match","join","parent","resolve","reject","firstChild","removeChild","milliseconds","parentElement","messageArray","nodeType","Node","ELEMENT_NODE","TypeError","isIterable","popouts","p","createElement","className","appendChild","push","transitionToResolve","property","this","transitionComplete","getComputedStyle","opacity","elements","every","element","promises","map","node","bind","object","Symbol","iterator","docReady","readyState","honeypot","addEventListener","fileUpload","updateFileList","nextElementSibling","list","innerHTML","item"],"sourceRoot":""}